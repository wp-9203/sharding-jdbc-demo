spring:
  shardingsphere:
    datasource:
      names:
        db-1,db-2
      # 主数据源
      db-1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/db-1?serverTimezone=Asia/Shanghai
        username: root
        password: 123456
      # 从数据源
      db-2:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/db-2?serverTimezone=Asia/Shanghai
        username: root
        password: 123456
    sharding: ##指定order表的数据分页情况，配置数据节点 m1.t_order_1 m1.t_order_2
      tables:
        t_order:
          actual-data-nodes: db-$->{1..2}.t_order_$->{0..1}
          #分库策略
          database-strategy:
            inline:
              sharding-column: id #分片键
              algorithm-expression: db-$->{id % 2+1}
          #分表策略
          table-strategy: #指定t_order表的分片策略，分片策略包括分片键和分片算法
            inline:
              sharding-column: id #分片键
              algorithm-expression: t_order_$->{id % 2} #分片算法
          key-generator:
            column: id #主键字段
            type: SNOWFLAKE #指定t_order表主键生成策略
      #必须按相同分片健进行分片的表才能互为成绑定表
    #    binding-tables: t_order , t_user
    props:
      sql:
        #开启sql显示，默认为false
        show: true
  main:
    allow-bean-definition-overriding: true
mybatis-plus:
  configuration:
    #在映射实体或者属性时，将数据库中表名和字段名中的下划线去掉，按照驼峰命名法映射
    map-underscore-to-camel-case: true
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  global-config:
    db-config:
      id-type: ASSIGN_ID